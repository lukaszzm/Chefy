generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  password        String
  accounts        Account[]
  sessions        Session[]
  likedRecipes    Recipe[]  @relation("UserLikedRecipes")
  dislikedRecipes Recipe[]  @relation("UserDislikedRecipes")
}

model Recipe {
  id           String   @id @default(cuid())
  imageSrc     String?
  title        String   @unique
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  area         Area     @relation(fields: [areaId], references: [id])
  areaId       String
  ingredients  String[]
  instructions String
  likers       User[]   @relation(name: "UserLikedRecipes")
  dislikers    User[]   @relation(name: "UserDislikedRecipes")
}

model Category {
  id     String   @id @default(cuid())
  name   String   @unique
  Recipe Recipe[]
}

model Area {
  id     String   @id @default(cuid())
  name   String   @unique
  Recipe Recipe[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
